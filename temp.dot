digraph UML {

	node [
		shape = "record"
	]

	ISprite [
		label = "{\<\<Composite Component\>\>\n\<\<Interface\>\>\nproblem/sprites/ISprite||+ void move(java.awt.Dimension)\l+ Shape getShape()\l+ Iterator iterator()\l|}"
		style=filled
		fillcolor=yellow

	]

	AbstractSprite [
		label = "{\<\<Leaf\>\>\nproblem/sprites/AbstractSprite|# dx: double\l# dy: double\l# shape: java.awt.Shape\l|# Rectangle2D computeNewBoundsAfterMoving(java.awt.Dimension)\l+ Shape getShape()\l+ void move(java.awt.Dimension)\l+ Iterator iterator()\l|}"
		style=filled
		fillcolor=yellow

	]

	SnowmanSprite [
		label = "{\<\<Composite\>\>\nproblem/sprites/SnowmanSprite||+ void move(java.awt.Dimension)\l|}"
		style=filled
		fillcolor=yellow

	]

	RectangleSprite [
		label = "{\<\<Leaf\>\>\nproblem/sprites/RectangleSprite||+ void move(java.awt.Dimension)\l|}"
		style=filled
		fillcolor=yellow

	]

	SnowmanWithBoxSprite [
		label = "{\<\<Composite\>\>\nproblem/sprites/SnowmanWithBoxSprite||+ void move(java.awt.Dimension)\l|}"
		style=filled
		fillcolor=yellow

	]

	MainWindow [
		label = "{problem/graphics/MainWindow|- frame: javax.swing.JFrame\l- actionPanel: javax.swing.JPanel\l- animationPanel: problem.graphics.AnimationPanel\l- moveButton: javax.swing.JButton\l- createButton: javax.swing.JButton\l- resetButton: javax.swing.JButton\l|- void createWidgets(java.lang.String, long)\l- void assignActions()\l+ void show()\l  AnimationPanel access$0(problem.graphics.MainWindow)\l  JButton access$1(problem.graphics.MainWindow)\l  JButton access$2(problem.graphics.MainWindow)\l|}"
		
	]

	CircleSprite [
		label = "{\<\<Leaf\>\>\nproblem/sprites/CircleSprite||+ void move(java.awt.Dimension)\l|}"
		style=filled
		fillcolor=yellow

	]

	SpriteFactory [
		label = "{problem/sprites/SpriteFactory|+ DX: double\l+ DY: double\l+ WIDTH: double\l+ HEIGHT: double\l- random: java.util.Random\l- sprites: java.util.List[java/lang/Class, problem/sprites/ISprite]\l|+ Point2D computeRandomLocation(java.awt.Dimension)\l+ ISprite createRandomSprite(java.awt.Dimension)\l|}"
		
	]

	AnimationPanel [
		label = "{problem/graphics/AnimationPanel|- serialVersionUID: long\l- sprites: java.util.List[problem/sprites/ISprite]\l- animating: boolean\l- sleepTime: long\l|+ void add(problem.sprites.ISprite)\l+ Dimension getSize()\l+ void animate()\l+ void reset()\l# void paintComponent(java.awt.Graphics)\l- void drawSprite(problem.sprites.ISprite, java.awt.Graphics2D)\l  boolean access$0(problem.graphics.AnimationPanel)\l  List access$1(problem.graphics.AnimationPanel)\l  long access$2(problem.graphics.AnimationPanel)\l|}"
		
	]

	AbstractCompositeSprite [
		label = "{\<\<Composite\>\>\nproblem/sprites/AbstractCompositeSprite|# dx: double\l# dy: double\l# shape: java.awt.Shape\l# children: java.util.List[problem/sprites/ISprite]\l|# Rectangle2D computeNewBoundsAfterMoving(java.awt.Dimension)\l+ Shape getShape()\l+ void move(java.awt.Dimension)\l+ Iterator iterator()\l|}"
		style=filled
		fillcolor=yellow

	]

	edge [
		arrowhead = "empty"
	]

	SnowmanSprite -> AbstractCompositeSprite

	RectangleSprite -> AbstractSprite

	SnowmanWithBoxSprite -> AbstractCompositeSprite

	CircleSprite -> AbstractSprite

	edge [
		style = "dashed"
	]

	AbstractSprite -> ISprite

	AbstractCompositeSprite -> ISprite

	edge [
		arrowhead = "normal" style = "solid"
	]

	MainWindow -> AnimationPanel

	SpriteFactory -> ISprite

	AnimationPanel -> ISprite

	AbstractCompositeSprite -> ISprite

	edge [
		arrowhead = "normal" style = "dashed"
	]

	AbstractSprite -> ISprite

	SnowmanSprite -> CircleSprite

	SnowmanSprite -> ISprite

	SnowmanWithBoxSprite -> RectangleSprite

	SnowmanWithBoxSprite -> SnowmanSprite

	SnowmanWithBoxSprite -> ISprite

	AnimationPanel -> AbstractCompositeSprite

}lder)\l|}"
		style=filled
		fillcolor=green
	]

	IClassDecorator -> IClass [label = "\<\<decorates\>\>"]

	MethodCalls [
		label = "{classRepresentation/MethodCalls|- calls: java.util.List[classRepresentation/SequenceMethodCall]\l- usedClasses: java.util.Set[java/lang/String]\l|+ void addMethodCall(classRepresentation.SequenceMethodCall)\l+ Iterator getIterator()\l+ String toSDEdit()\l- void addClasses(java.lang.StringBuilder)\l- void addMethodCalls(java.lang.StringBuilder)\l- String removeReturnDots(java.lang.String)\l- String removeParamDots(java.util.List)\l|}"
		
	]

	TopLevelDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/TopLevelDecorator||+ void decorate(classRepresentation.decorators.IClassDecorator)\l+ void toGraphViz(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	MutableBoolean [
		label = "{classRepresentation/designPaterns/MutableBoolean|+ value: boolean\l||}"
		
	]

	IClass [
		label = "{\<\<Decorator Component\>\>\n\<\<Interface\>\>\ninterfaces/IClass||+ void setName(java.lang.String)\l+ String getName()\l+ void setSuperClass(java.lang.String)\l+ String getSuperClass()\l+ void setInterfaces(java.util.List)\l+ List getInterfaces()\l+ void setFields(java.util.List)\l+ List getFields()\l+ void setMethods(java.util.List)\l+ List getMethods()\l+ void addMethod(interfaces.IMethod)\l+ void addField(interfaces.IField)\l+ void addAssociatedClass(java.lang.String)\l+ void addUsedClass(java.lang.String)\l+ List getAssociatedClasses()\l+ List getUsedClasses()\l+ void toGraphViz(java.lang.StringBuilder)\l+ void appendGraphVizHeader(java.lang.StringBuilder)\l+ void appendGraphVizStereotype(java.lang.StringBuilder)\l+ void appendGraphVizClassName(java.lang.StringBuilder)\l+ void appendGraphVizFields(java.lang.StringBuilder)\l+ void appendGraphVizMethods(java.lang.StringBuilder)\l+ void appendGraphVizColor(java.lang.StringBuilder)\l+ void appendGraphVizFooter(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green

	]

	ClassDeclarationVisitor [
		label = "{umlDiagram/ClassDeclarationVisitor|- currentClass: classRepresentation.decorators.IClassDecorator\l|+ void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])\l|}"
		
	]

	SequenceMethodCall [
		label = "{classRepresentation/SequenceMethodCall|- methodName: java.lang.String\l- invokerName: java.lang.String\l- ownerName: java.lang.String\l- returnType: java.lang.String\l- parameters: java.util.List[java/lang/String]\l- isInit: boolean\l|+ String getName()\l+ void setName(java.lang.String)\l+ String getInvoker()\l+ String getOwner()\l+ void setInvoker(java.lang.String)\l+ void setOwner(java.lang.String)\l+ String getReturnType()\l+ void setReturnType(java.lang.String)\l+ List getParameters()\l+ void setParameters(java.util.List)\l+ boolean isInit()\l+ void setInit(boolean)\l|}"
		
	]

	AdapteeDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/AdapteeDecorator||+ void appendGraphVizColor(java.lang.StringBuilder)\l+ void appendGraphVizStereotype(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	DecoratorDetector [
		label = "{classRepresentation/designPaterns/DecoratorDetector|- classMap: java.util.Map[java/lang/String, interfaces/IClass]\l- discoveredDecorators: java.util.List[java/lang/String]\l|+ void detectPattern()\l- void checkChildDecorators(interfaces.IClass)\l- void checkForInterfaceClassDecorator(interfaces.IClass)\l- void checkForDecorator(interfaces.IClass, java.lang.String)\l- void applyDecorator(interfaces.IClass, java.lang.String)\l- void setComponentToInterface(java.lang.String)\l- boolean isDecorator(interfaces.IClass)\l|}"
		
	]

	InterfaceDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/InterfaceDecorator||+ void appendGraphVizStereotype(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	AdaptionTargetDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/AdaptionTargetDecorator||+ void appendGraphVizColor(java.lang.StringBuilder)\l+ void appendGraphVizStereotype(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	CompositeComponentDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/CompositeComponentDecorator||+ void appendGraphVizStereotype(java.lang.StringBuilder)\l+ void appendGraphVizColor(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	Classes [
		label = "{classRepresentation/Classes|- classes: java.util.Map[java/lang/String, interfaces/IClass]\l|+ Map getClasses()\l+ void setClasses(java.util.Map)\l+ void addClass(interfaces.IClass)\l+ String printGraphVizInput()\l- void appendUsedClasses(java.lang.StringBuilder, java.util.Set)\l- void appendAssociatedClasses(java.lang.StringBuilder, java.util.Set)\l- void appendClasses(java.lang.StringBuilder, java.util.Set)\l- void appendInterfaces(java.lang.StringBuilder, java.util.Set)\l- void appendSuperClass(java.lang.StringBuilder, java.util.Set)\l|}"
		
	]

	UMLClass [
		label = "{classRepresentation/UMLClass|- name: java.lang.String\l- superClass: java.lang.String\l- interfaces: java.util.List[java/lang/String]\l- associatedClasses: java.util.List[java/lang/String]\l- usedClasses: java.util.List[java/lang/String]\l- fields: java.util.List[interfaces/IField]\l- methods: java.util.List[interfaces/IMethod]\l|+ void setFields(java.util.List)\l+ List getFields()\l+ void setMethods(java.util.List)\l+ List getMethods()\l+ void setName(java.lang.String)\l+ String getName()\l+ void setSuperClass(java.lang.String)\l+ String getSuperClass()\l+ void setInterfaces(java.util.List)\l+ List getInterfaces()\l+ void addMethod(interfaces.IMethod)\l+ void addField(interfaces.IField)\l+ void addAssociatedClass(java.lang.String)\l+ void addUsedClass(java.lang.String)\l+ List getAssociatedClasses()\l+ List getUsedClasses()\l+ void appendGraphVizHeader(java.lang.StringBuilder)\l+ void appendGraphVizStereotype(java.lang.StringBuilder)\l+ void appendGraphVizClassName(java.lang.StringBuilder)\l+ void appendGraphVizFields(java.lang.StringBuilder)\l+ void appendGraphVizMethods(java.lang.StringBuilder)\l+ void appendGraphVizColor(java.lang.StringBuilder)\l+ void appendGraphVizFooter(java.lang.StringBuilder)\l+ void toGraphViz(java.lang.StringBuilder)\l|}"
		
	]

	AdapterMethodVisitor [
		label = "{classRepresentation/designPaterns/AdapterMethodVisitor|- fieldName: java.lang.String\l- bool: classRepresentation.designPaterns.MutableBoolean\l- fieldFound: boolean\l|+ void visitCode()\l+ void visitEnd()\l+ void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)\l|}"
		
	]

	AdapterDetector [
		label = "{classRepresentation/designPaterns/AdapterDetector|- classMap: java.util.Map[java/lang/String, interfaces/IClass]\l|+ void detectPattern()\l- void addAdaptee(classRepresentation.decorators.AdapterDecorator)\l- void removeUsesArrow(interfaces.IClass, java.lang.String)\l- void addTarget(classRepresentation.decorators.AdapterDecorator)\l- AdapterDecorator getAdapter(interfaces.IClass)\l|}"
		
	]

	AdapterFieldVisitor [
		label = "{classRepresentation/designPaterns/AdapterFieldVisitor|- fieldName: java.lang.String\l- fieldType: java.lang.String\l- bool: classRepresentation.designPaterns.MutableBoolean\l|+ MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])\l|}"
		
	]

	DecoratorComponentDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/DecoratorComponentDecorator||+ void appendGraphVizColor(java.lang.StringBuilder)\l+ void appendGraphVizStereotype(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	SequenceParser [
		label = "{sequenceDiagram/SequenceParser|+ calls: classRepresentation.MethodCalls\l- DEFAULT_DEPTH_LIMIT: int\l- STARTING_DEPTH: int\l|+ void main(java.lang.String[])\l|}"
		
	]

	MethodCodeVisitor [
		label = "{umlDiagram/MethodCodeVisitor|- currentClass: interfaces.IClass\l|+ void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)\l|}"
		
	]

	AdapterClassVisitor [
		label = "{classRepresentation/designPaterns/AdapterClassVisitor|  currentClass: classRepresentation.decorators.IClassDecorator\l|+ FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)\l|}"
		
	]

	SingleMethodVisitor [
		label = "{sequenceDiagram/SingleMethodVisitor|- depth: int\l- depthLimit: int\l- fullMethodName: java.lang.String\l- method: classRepresentation.SequenceMethodCall\l|- String getMethodName()\l+ MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])\l|}"
		
	]

	SequenceMethodCodeVisitor [
		label = "{sequenceDiagram/SequenceMethodCodeVisitor|- depth: int\l- depthLimit: int\l- invoker: java.lang.String\l- currentMethod: classRepresentation.SequenceMethodCall\l|+ void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)\l- String getParamName(org.objectweb.asm.Type)\l|}"
		
	]

	ClassFieldVisitor [
		label = "{umlDiagram/ClassFieldVisitor|- currentClass: interfaces.IClass\l- field: interfaces.IField\l|+ FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)\l+ void handleSignature(java.lang.String, java.lang.String)\l  IClass access$0(umlDiagram.ClassFieldVisitor)\l  IField access$1(umlDiagram.ClassFieldVisitor)\l|}"
		
	]

	ClassMethodVisitor [
		label = "{umlDiagram/ClassMethodVisitor|- currentClass: interfaces.IClass\l|+ MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])\l|}"
		
	]

	CompositeLeafDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/CompositeLeafDecorator||+ void appendGraphVizStereotype(java.lang.StringBuilder)\l+ void appendGraphVizColor(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	MethodDeclarationVisitor [
		label = "{umlDiagram/MethodDeclarationVisitor|- currentClass: classRepresentation.decorators.IClassDecorator\l|+ MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])\l+ void handleSignature(java.lang.String)\l  IClassDecorator access$0(umlDiagram.MethodDeclarationVisitor)\l|}"
		
	]

	IField [
		label = "{\<\<Interface\>\>\ninterfaces/IField||+ String getType()\l+ void setType(java.lang.String)\l+ String getName()\l+ void setName(java.lang.String)\l+ char getVisibility()\l+ void setVisibility(char)\l+ List getNonAccessModifiers()\l+ void setNonAccessModifiers(java.util.List)\l+ List getInteriorTypes()\l+ void addInteriorType(java.lang.String)\l|}"
		
	]

	SingletonFieldVisitor [
		label = "{umlDiagram/SingletonFieldVisitor|- currentClass: classRepresentation.decorators.IClassDecorator\l|+ FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)\l- void lookForGetter()\l|}"
		
	]

	DecoratorDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/DecoratorDecorator|- component: java.lang.String\l|+ void appendGraphVizColor(java.lang.StringBuilder)\l+ void appendGraphVizStereotype(java.lang.StringBuilder)\l+ void appendGraphVizFooter(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	SingletonDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/SingletonDecorator||+ void appendGraphVizStereotype(java.lang.StringBuilder)\l+ void appendGraphVizColor(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	UMLMethod [
		label = "{classRepresentation/UMLMethod|- parameters: java.util.List[java/lang/String]\l- name: java.lang.String\l- visibility: char\l- nonAccessModifiers: java.util.List[java/lang/String]\l- returnType: java.lang.String\l|+ String toString()\l+ String getReturnType()\l+ void setReturnType(java.lang.String)\l+ List getParameters()\l+ void setParameters(java.util.List)\l+ String getName()\l+ void setName(java.lang.String)\l+ char getVisibility()\l+ void setVisibility(char)\l+ List getNonAccessModifiers()\l+ void setNonAccessModifiers(java.util.List)\l+ boolean equals(java.lang.Object)\l|}"
		
	]

	CompositeDetector [
		label = "{classRepresentation/designPaterns/CompositeDetector|- classMap: java.util.Map[java/lang/String, interfaces/IClass]\l- detectedComponents: java.util.List[java/lang/String]\l- detectedComposites: java.util.List[java/lang/String]\l- classesInPattern: java.util.Set[java/lang/String]\l- COLLECTIONS: java.util.List[java/lang/String]\l|+ void detectPattern()\l- void identifyPatternClasses()\l- void getClassesInPattern()\l- void findSeedComposites()\l- void checkInterfaces(interfaces.IClass, interfaces.IField)\l- void checkSupers(interfaces.IClass, interfaces.IField)\l- void checkInterfacesArray(interfaces.IClass, interfaces.IField)\l- void checkSupersArray(interfaces.IClass, interfaces.IField)\l- List getSuperClasses(interfaces.IClass)\l- void decorateComponents()\l- boolean isComposite(interfaces.IClass)\l- boolean isComponent(interfaces.IClass)\l- CompositeDecorator findComposite(interfaces.IClass)\l|}"
		
	]

	edge [
		arrowhead = "empty"
	]

	AdapterDecorator -> IClassDecorator

	CompositeDecorator -> IClassDecorator

	TopLevelDecorator -> IClassDecorator

	AdapteeDecorator -> IClassDecorator

	InterfaceDecorator -> IClassDecorator

	AdaptionTargetDecorator -> IClassDecorator

	CompositeComponentDecorator -> IClassDecorator

	DecoratorComponentDecorator -> IClassDecorator

	CompositeLeafDecorator -> IClassDecorator

	DecoratorDecorator -> IClassDecorator

	SingletonDecorator -> IClassDecorator

	edge [
		style = "dashed"
	]

	UMLField -> IField

	IClassDecorator -> IClass

	UMLClass -> IClass

	UMLMethod -> IMethod

	edge [
		arrowhead = "normal" style = "solid"
	]

	SingletonMethodVisitor -> IClassDecorator

	UMLParser -> Classes

	IClassDecorator -> IClass

	MethodCalls -> SequenceMethodCall

	ClassDeclarationVisitor -> IClassDecorator

	DecoratorDetector -> IClass

	Classes -> IClass

	UMLClass -> IField

	UMLClass -> IMethod

	AdapterMethodVisitor -> MutableBoolean

	AdapterDetector -> IClass

	AdapterFieldVisitor -> MutableBoolean

	SequenceParser -> MethodCalls

	MethodCodeVisitor -> IClass

	AdapterClassVisitor -> IClassDecorator

	SingleMethodVisitor -> SequenceMethodCall

	SequenceMethodCodeVisitor -> SequenceMethodCall

	ClassFieldVisitor -> IClass

	ClassFieldVisitor -> IField

	ClassMethodVisitor -> IClass

	MethodDeclarationVisitor -> IClassDecorator

	SingletonFieldVisitor -> IClassDecorator

	CompositeDetector -> IClass

	edge [
		arrowhead = "normal" style = "dashed"
	]

	SingletonMethodVisitor -> UMLParser

	SingletonMethodVisitor -> SingletonDecorator

	UMLParser -> UMLClass

	UMLParser -> TopLevelDecorator

	UMLParser -> ClassDeclarationVisitor

	UMLParser -> SingletonFieldVisitor

	UMLParser -> ClassFieldVisitor

	UMLParser -> ClassMethodVisitor

	UMLParser -> MethodDeclarationVisitor

	UMLParser -> AdapterClassVisitor

	UMLParser -> DecoratorDetector

	UMLParser -> AdapterDetector

	UMLParser -> CompositeDetector

	AdapterDecorator -> IClass

	AdapterDecorator -> UMLParser

	CompositeDecorator -> IClass

	IClassDecorator -> IField

	IClassDecorator -> IMethod

	TopLevelDecorator -> IClass

	TopLevelDecorator -> IClassDecorator

	IClass -> IField

	IClass -> IMethod

	ClassDeclarationVisitor -> InterfaceDecorator

	AdapteeDecorator -> IClass

	DecoratorDetector -> Classes

	DecoratorDetector -> IField

	DecoratorDetector -> DecoratorDecorator

	DecoratorDetector -> IClassDecorator

	DecoratorDetector -> DecoratorComponentDecorator

	InterfaceDecorator -> IClass

	AdaptionTargetDecorator -> IClass

	CompositeComponentDecorator -> IClass

	UMLClass -> UMLParser

	AdapterDetector -> Classes

	AdapterDetector -> AdapterDecorator

	AdapterDetector -> AdapteeDecorator

	AdapterDetector -> IClassDecorator

	AdapterDetector -> AdaptionTargetDecorator

	AdapterFieldVisitor -> AdapterMethodVisitor

	DecoratorComponentDecorator -> IClass

	SequenceParser -> SingleMethodVisitor

	AdapterClassVisitor -> MutableBoolean

	AdapterClassVisitor -> AdapterFieldVisitor

	AdapterClassVisitor -> AdapterDecorator

	SingleMethodVisitor -> SequenceMethodCodeVisitor

	SingleMethodVisitor -> MethodCalls

	SequenceMethodCodeVisitor -> SingleMethodVisitor

	ClassFieldVisitor -> UMLField

	ClassMethodVisitor -> UMLMethod

	ClassMethodVisitor -> IMethod

	CompositeLeafDecorator -> IClass

	MethodDeclarationVisitor -> MethodCodeVisitor

	SingletonFieldVisitor -> UMLParser

	SingletonFieldVisitor -> SingletonMethodVisitor

	DecoratorDecorator -> IClass

	SingletonDecorator -> IClass

	CompositeDetector -> Classes

	CompositeDetector -> IField

	CompositeDetector -> CompositeDecorator

	CompositeDetector -> IClassDecorator

	CompositeDetector -> CompositeLeafDecorator

	CompositeDetector -> CompositeComponentDecorator

}