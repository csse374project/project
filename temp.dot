digraph UML {

	node [
		shape = "record"
	]

	SingletonMethodVisitor [
		label = "{umlDiagram/SingletonMethodVisitor|- currentClass: classRepresentation.decorators.IClassDecorator\l|+ MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])\l|}"
		
	]

	UMLParser [
		label = "{umlDiagram/UMLParser|- classesToAccept: java.lang.String[]\l- inputFolder: java.lang.String\l- outputDir: java.lang.String\l- dotPath: java.lang.String\l- inputClasses: java.util.List[java/lang/String]\l- classes: classRepresentation.Classes\l|+ void main(java.lang.String[])\l- void parseByteCode()\l- void detectPatterns()\l- void createGraph(java.lang.String)\l- void setClassesToAccept(java.lang.String[])\l+ boolean classIsUsed(java.lang.String)\l+ String replaceDotsWithSlashes(java.lang.String)\l|}"
		
	]

	AdapterDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/AdapterDecorator|- adaptee: java.lang.String\l- target: java.lang.String\l|+ String getAdaptee()\l+ String getTarget()\l+ void appendGraphVizColor(java.lang.StringBuilder)\l+ void appendGraphVizStereotype(java.lang.StringBuilder)\l+ void appendGraphVizFooter(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	IMethod [
		label = "{\<\<Interface\>\>\ninterfaces/IMethod||+ String getReturnType()\l+ void setReturnType(java.lang.String)\l+ List getParameters()\l+ void setParameters(java.util.List)\l+ String getName()\l+ void setName(java.lang.String)\l+ char getVisibility()\l+ void setVisibility(char)\l+ List getNonAccessModifiers()\l+ void setNonAccessModifiers(java.util.List)\l|}"
		
	]

	UMLField [
		label = "{classRepresentation/UMLField|- type: java.lang.String\l- name: java.lang.String\l- visibility: char\l- nonAccessModifiers: java.util.List[java/lang/String]\l- interiorTypes: java.util.List[java/lang/String]\l|+ String getType()\l+ void setType(java.lang.String)\l+ String getName()\l+ void setName(java.lang.String)\l+ char getVisibility()\l+ void setVisibility(char)\l+ List getNonAccessModifiers()\l+ void setNonAccessModifiers(java.util.List)\l+ boolean equals(java.lang.Object)\l+ List getInteriorTypes()\l+ void addInteriorType(java.lang.String)\l|}"
		
	]

	CompositeDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/CompositeDecorator|- component: java.lang.String\l|+ String getComponent()\l+ void setComponent(java.lang.String)\l+ void appendGraphVizStereotype(java.lang.StringBuilder)\l+ void appendGraphVizColor(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	IClassDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/IClassDecorator|# decorates: interfaces.IClass\l|+ void decorate(classRepresentation.decorators.IClassDecorator)\l# void setDecorates(interfaces.IClass)\l+ IClass getDecorates()\l+ void setName(java.lang.String)\l+ String getName()\l+ void setSuperClass(java.lang.String)\l+ String getSuperClass()\l+ void setInterfaces(java.util.List)\l+ List getInterfaces()\l+ void setFields(java.util.List)\l+ List getFields()\l+ void setMethods(java.util.List)\l+ List getMethods()\l+ void addMethod(interfaces.IMethod)\l+ void addField(interfaces.IField)\l+ void addAssociatedClass(java.lang.String)\l+ void addUsedClass(java.lang.String)\l+ List getAssociatedClasses()\l+ List getUsedClasses()\l+ void toGraphViz(java.lang.StringBuilder)\l+ void appendGraphVizHeader(java.lang.StringBuilder)\l+ void appendGraphVizStereotype(java.lang.StringBuilder)\l+ void appendGraphVizClassName(java.lang.StringBuilder)\l+ void appendGraphVizFields(java.lang.StringBuilder)\l+ void appendGraphVizMethods(java.lang.StringBuilder)\l+ void appendGraphVizColor(java.lang.StringBuilder)\l+ void appendGraphVizFooter(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	IClassDecorator -> IClass [label = "\<\<decorates\>\>"]

	MethodCalls [
		label = "{classRepresentation/MethodCalls|- calls: java.util.List[classRepresentation/SequenceMethodCall]\l- usedClasses: java.util.Set[java/lang/String]\l|+ void addMethodCall(classRepresentation.SequenceMethodCall)\l+ Iterator getIterator()\l+ String toSDEdit()\l- void addClasses(java.lang.StringBuilder)\l- void addMethodCalls(java.lang.StringBuilder)\l- String removeReturnDots(java.lang.String)\l- String removeParamDots(java.util.List)\l|}"
		
	]

	TopLevelDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/TopLevelDecorator||+ void decorate(classRepresentation.decorators.IClassDecorator)\l+ void toGraphViz(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	MutableBoolean [
		label = "{classRepresentation/designPaterns/MutableBoolean|+ value: boolean\l||}"
		
	]

	IClass [
		label = "{\<\<Decorator Component\>\>\n\<\<Interface\>\>\ninterfaces/IClass||+ void setName(java.lang.String)\l+ String getName()\l+ void setSuperClass(java.lang.String)\l+ String getSuperClass()\l+ void setInterfaces(java.util.List)\l+ List getInterfaces()\l+ void setFields(java.util.List)\l+ List getFields()\l+ void setMethods(java.util.List)\l+ List getMethods()\l+ void addMethod(interfaces.IMethod)\l+ void addField(interfaces.IField)\l+ void addAssociatedClass(java.lang.String)\l+ void addUsedClass(java.lang.String)\l+ List getAssociatedClasses()\l+ List getUsedClasses()\l+ void toGraphViz(java.lang.StringBuilder)\l+ void appendGraphVizHeader(java.lang.StringBuilder)\l+ void appendGraphVizStereotype(java.lang.StringBuilder)\l+ void appendGraphVizClassName(java.lang.StringBuilder)\l+ void appendGraphVizFields(java.lang.StringBuilder)\l+ void appendGraphVizMethods(java.lang.StringBuilder)\l+ void appendGraphVizColor(java.lang.StringBuilder)\l+ void appendGraphVizFooter(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green

	]

	ClassDeclarationVisitor [
		label = "{umlDiagram/ClassDeclarationVisitor|- currentClass: classRepresentation.decorators.IClassDecorator\l|+ void visit(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])\l|}"
		
	]

	SequenceMethodCall [
		label = "{classRepresentation/SequenceMethodCall|- methodName: java.lang.String\l- invokerName: java.lang.String\l- ownerName: java.lang.String\l- returnType: java.lang.String\l- parameters: java.util.List[java/lang/String]\l- isInit: boolean\l|+ String getName()\l+ void setName(java.lang.String)\l+ String getInvoker()\l+ String getOwner()\l+ void setInvoker(java.lang.String)\l+ void setOwner(java.lang.String)\l+ String getReturnType()\l+ void setReturnType(java.lang.String)\l+ List getParameters()\l+ void setParameters(java.util.List)\l+ boolean isInit()\l+ void setInit(boolean)\l|}"
		
	]

	AdapteeDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/AdapteeDecorator||+ void appendGraphVizColor(java.lang.StringBuilder)\l+ void appendGraphVizStereotype(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	DecoratorDetector [
		label = "{classRepresentation/designPaterns/DecoratorDetector|- classMap: java.util.Map[java/lang/String, interfaces/IClass]\l- discoveredDecorators: java.util.List[java/lang/String]\l|+ void detectPattern()\l- void checkChildDecorators(interfaces.IClass)\l- void checkForInterfaceClassDecorator(interfaces.IClass)\l- void checkForDecorator(interfaces.IClass, java.lang.String)\l- void applyDecorator(interfaces.IClass, java.lang.String)\l- void setComponentToInterface(java.lang.String)\l- boolean isDecorator(interfaces.IClass)\l|}"
		
	]

	InterfaceDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/InterfaceDecorator||+ void appendGraphVizStereotype(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	AdaptionTargetDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/AdaptionTargetDecorator||+ void appendGraphVizColor(java.lang.StringBuilder)\l+ void appendGraphVizStereotype(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	CompositeComponentDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/CompositeComponentDecorator||+ void appendGraphVizStereotype(java.lang.StringBuilder)\l+ void appendGraphVizColor(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	Classes [
		label = "{classRepresentation/Classes|- classes: java.util.Map[java/lang/String, interfaces/IClass]\l|+ Map getClasses()\l+ void setClasses(java.util.Map)\l+ void addClass(interfaces.IClass)\l+ String printGraphVizInput()\l- void appendUsedClasses(java.lang.StringBuilder, java.util.Set)\l- void appendAssociatedClasses(java.lang.StringBuilder, java.util.Set)\l- void appendClasses(java.lang.StringBuilder, java.util.Set)\l- void appendInterfaces(java.lang.StringBuilder, java.util.Set)\l- void appendSuperClass(java.lang.StringBuilder, java.util.Set)\l|}"
		
	]

	UMLClass [
		label = "{classRepresentation/UMLClass|- name: java.lang.String\l- superClass: java.lang.String\l- interfaces: java.util.List[java/lang/String]\l- associatedClasses: java.util.List[java/lang/String]\l- usedClasses: java.util.List[java/lang/String]\l- fields: java.util.List[interfaces/IField]\l- methods: java.util.List[interfaces/IMethod]\l|+ void setFields(java.util.List)\l+ List getFields()\l+ void setMethods(java.util.List)\l+ List getMethods()\l+ void setName(java.lang.String)\l+ String getName()\l+ void setSuperClass(java.lang.String)\l+ String getSuperClass()\l+ void setInterfaces(java.util.List)\l+ List getInterfaces()\l+ void addMethod(interfaces.IMethod)\l+ void addField(interfaces.IField)\l+ void addAssociatedClass(java.lang.String)\l+ void addUsedClass(java.lang.String)\l+ List getAssociatedClasses()\l+ List getUsedClasses()\l+ void appendGraphVizHeader(java.lang.StringBuilder)\l+ void appendGraphVizStereotype(java.lang.StringBuilder)\l+ void appendGraphVizClassName(java.lang.StringBuilder)\l+ void appendGraphVizFields(java.lang.StringBuilder)\l+ void appendGraphVizMethods(java.lang.StringBuilder)\l+ void appendGraphVizColor(java.lang.StringBuilder)\l+ void appendGraphVizFooter(java.lang.StringBuilder)\l+ void toGraphViz(java.lang.StringBuilder)\l|}"
		
	]

	AdapterMethodVisitor [
		label = "{classRepresentation/designPaterns/AdapterMethodVisitor|- fieldName: java.lang.String\l- bool: classRepresentation.designPaterns.MutableBoolean\l- fieldFound: boolean\l|+ void visitCode()\l+ void visitEnd()\l+ void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)\l|}"
		
	]

	AdapterDetector [
		label = "{classRepresentation/designPaterns/AdapterDetector|- classMap: java.util.Map[java/lang/String, interfaces/IClass]\l|+ void detectPattern()\l- void addAdaptee(classRepresentation.decorators.AdapterDecorator)\l- void removeUsesArrow(interfaces.IClass, java.lang.String)\l- void addTarget(classRepresentation.decorators.AdapterDecorator)\l- AdapterDecorator getAdapter(interfaces.IClass)\l|}"
		
	]

	AdapterFieldVisitor [
		label = "{classRepresentation/designPaterns/AdapterFieldVisitor|- fieldName: java.lang.String\l- fieldType: java.lang.String\l- bool: classRepresentation.designPaterns.MutableBoolean\l|+ MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])\l|}"
		
	]

	DecoratorComponentDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/DecoratorComponentDecorator||+ void appendGraphVizColor(java.lang.StringBuilder)\l+ void appendGraphVizStereotype(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	SequenceParser [
		label = "{sequenceDiagram/SequenceParser|+ calls: classRepresentation.MethodCalls\l- DEFAULT_DEPTH_LIMIT: int\l- STARTING_DEPTH: int\l|+ void main(java.lang.String[])\l|}"
		
	]

	MethodCodeVisitor [
		label = "{umlDiagram/MethodCodeVisitor|- currentClass: interfaces.IClass\l|+ void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)\l|}"
		
	]

	AdapterClassVisitor [
		label = "{classRepresentation/designPaterns/AdapterClassVisitor|  currentClass: classRepresentation.decorators.IClassDecorator\l|+ FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)\l|}"
		
	]

	SingleMethodVisitor [
		label = "{sequenceDiagram/SingleMethodVisitor|- depth: int\l- depthLimit: int\l- fullMethodName: java.lang.String\l- method: classRepresentation.SequenceMethodCall\l|- String getMethodName()\l+ MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])\l|}"
		
	]

	SequenceMethodCodeVisitor [
		label = "{sequenceDiagram/SequenceMethodCodeVisitor|- depth: int\l- depthLimit: int\l- invoker: java.lang.String\l- currentMethod: classRepresentation.SequenceMethodCall\l|+ void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)\l- String getParamName(org.objectweb.asm.Type)\l|}"
		
	]

	ClassFieldVisitor [
		label = "{umlDiagram/ClassFieldVisitor|- currentClass: interfaces.IClass\l- field: interfaces.IField\l|+ FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)\l+ void handleSignature(java.lang.String, java.lang.String)\l  IClass access$0(umlDiagram.ClassFieldVisitor)\l  IField access$1(umlDiagram.ClassFieldVisitor)\l|}"
		
	]

	ClassMethodVisitor [
		label = "{umlDiagram/ClassMethodVisitor|- currentClass: interfaces.IClass\l|+ MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])\l|}"
		
	]

	CompositeLeafDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/CompositeLeafDecorator||+ void appendGraphVizStereotype(java.lang.StringBuilder)\l+ void appendGraphVizColor(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	MethodDeclarationVisitor [
		label = "{umlDiagram/MethodDeclarationVisitor|- currentClass: classRepresentation.decorators.IClassDecorator\l|+ MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])\l+ void handleSignature(java.lang.String)\l  IClassDecorator access$0(umlDiagram.MethodDeclarationVisitor)\l|}"
		
	]

	IField [
		label = "{\<\<Interface\>\>\ninterfaces/IField||+ String getType()\l+ void setType(java.lang.String)\l+ String getName()\l+ void setName(java.lang.String)\l+ char getVisibility()\l+ void setVisibility(char)\l+ List getNonAccessModifiers()\l+ void setNonAccessModifiers(java.util.List)\l+ List getInteriorTypes()\l+ void addInteriorType(java.lang.String)\l|}"
		
	]

	SingletonFieldVisitor [
		label = "{umlDiagram/SingletonFieldVisitor|- currentClass: classRepresentation.decorators.IClassDecorator\l|+ FieldVisitor visitField(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object)\l- void lookForGetter()\l|}"
		
	]

	DecoratorDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/DecoratorDecorator|- component: java.lang.String\l|+ void appendGraphVizColor(java.lang.StringBuilder)\l+ void appendGraphVizStereotype(java.lang.StringBuilder)\l+ void appendGraphVizFooter(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	SingletonDecorator [
		label = "{\<\<Decorator\>\>\nclassRepresentation/decorators/SingletonDecorator||+ void appendGraphVizStereotype(java.lang.StringBuilder)\l+ void appendGraphVizColor(java.lang.StringBuilder)\l|}"
		style=filled
		fillcolor=green
	]

	UMLMethod [
		label = "{classRepresentation/UMLMethod|- parameters: java.util.List[java/lang/String]\l- name: java.lang.String\l- visibility: char\l- nonAccessModifiers: java.util.List[java/lang/String]\l- returnType: java.lang.String\l|+ String toString()\l+ String getReturnType()\l+ void setReturnType(java.lang.String)\l+ List getParameters()\l+ void setParameters(java.util.List)\l+ String getName()\l+ void setName(java.lang.String)\l+ char getVisibility()\l+ void setVisibility(char)\l+ List getNonAccessModifiers()\l+ void setNonAccessModifiers(java.util.List)\l+ boolean equals(java.lang.Object)\l|}"
		
	]

	CompositeDetector [
		label = "{classRepresentation/designPaterns/CompositeDetector|- classMap: java.util.Map[java/lang/String, interfaces/IClass]\l- detectedComponents: java.util.List[java/lang/String]\l- detectedComposites: java.util.List[java/lang/String]\l- classesInPattern: java.util.Set[java/lang/String]\l- COLLECTIONS: java.util.List[java/lang/String]\l|+ void detectPattern()\l- void identifyPatternClasses()\l- void getClassesInPattern()\l- void findSeedComposites()\l- void checkInterfaces(interfaces.IClass, interfaces.IField)\l- void checkSupers(interfaces.IClass, interfaces.IField)\l- List getSuperClasses(interfaces.IClass)\l- void decorateComponents()\l- boolean isComposite(interfaces.IClass)\l- boolean isComponent(interfaces.IClass)\l- CompositeDecorator findComposite(interfaces.IClass)\l|}"
		
	]

	edge [
		arrowhead = "empty"
	]

	AdapterDecorator -> IClassDecorator

	CompositeDecorator -> IClassDecorator

	TopLevelDecorator -> IClassDecorator

	AdapteeDecorator -> IClassDecorator

	InterfaceDecorator -> IClassDecorator

	AdaptionTargetDecorator -> IClassDecorator

	CompositeComponentDecorator -> IClassDecorator

	DecoratorComponentDecorator -> IClassDecorator

	CompositeLeafDecorator -> IClassDecorator

	DecoratorDecorator -> IClassDecorator

	SingletonDecorator -> IClassDecorator

	edge [
		style = "dashed"
	]

	UMLField -> IField

	IClassDecorator -> IClass

	UMLClass -> IClass

	UMLMethod -> IMethod

	edge [
		arrowhead = "normal" style = "solid"
	]

	SingletonMethodVisitor -> IClassDecorator

	UMLParser -> Classes

	IClassDecorator -> IClass

	MethodCalls -> SequenceMethodCall

	ClassDeclarationVisitor -> IClassDecorator

	DecoratorDetector -> IClass

	Classes -> IClass

	UMLClass -> IField

	UMLClass -> IMethod

	AdapterMethodVisitor -> MutableBoolean

	AdapterDetector -> IClass

	AdapterFieldVisitor -> MutableBoolean

	SequenceParser -> MethodCalls

	MethodCodeVisitor -> IClass

	AdapterClassVisitor -> IClassDecorator

	SingleMethodVisitor -> SequenceMethodCall

	SequenceMethodCodeVisitor -> SequenceMethodCall

	ClassFieldVisitor -> IClass

	ClassFieldVisitor -> IField

	ClassMethodVisitor -> IClass

	MethodDeclarationVisitor -> IClassDecorator

	SingletonFieldVisitor -> IClassDecorator

	CompositeDetector -> IClass

	edge [
		arrowhead = "normal" style = "dashed"
	]

	SingletonMethodVisitor -> UMLParser

	SingletonMethodVisitor -> SingletonDecorator

	UMLParser -> UMLClass

	UMLParser -> TopLevelDecorator

	UMLParser -> ClassDeclarationVisitor

	UMLParser -> SingletonFieldVisitor

	UMLParser -> ClassFieldVisitor

	UMLParser -> ClassMethodVisitor

	UMLParser -> MethodDeclarationVisitor

	UMLParser -> AdapterClassVisitor

	UMLParser -> DecoratorDetector

	UMLParser -> AdapterDetector

	UMLParser -> CompositeDetector

	AdapterDecorator -> IClass

	AdapterDecorator -> UMLParser

	CompositeDecorator -> IClass

	IClassDecorator -> IField

	IClassDecorator -> IMethod

	TopLevelDecorator -> IClass

	TopLevelDecorator -> IClassDecorator

	IClass -> IField

	IClass -> IMethod

	ClassDeclarationVisitor -> InterfaceDecorator

	AdapteeDecorator -> IClass

	DecoratorDetector -> Classes

	DecoratorDetector -> IField

	DecoratorDetector -> DecoratorDecorator

	DecoratorDetector -> IClassDecorator

	DecoratorDetector -> DecoratorComponentDecorator

	InterfaceDecorator -> IClass

	AdaptionTargetDecorator -> IClass

	CompositeComponentDecorator -> IClass

	UMLClass -> UMLParser

	AdapterDetector -> Classes

	AdapterDetector -> AdapterDecorator

	AdapterDetector -> AdapteeDecorator

	AdapterDetector -> IClassDecorator

	AdapterDetector -> AdaptionTargetDecorator

	AdapterFieldVisitor -> AdapterMethodVisitor

	DecoratorComponentDecorator -> IClass

	SequenceParser -> SingleMethodVisitor

	AdapterClassVisitor -> MutableBoolean

	AdapterClassVisitor -> AdapterFieldVisitor

	AdapterClassVisitor -> AdapterDecorator

	SingleMethodVisitor -> SequenceMethodCodeVisitor

	SingleMethodVisitor -> MethodCalls

	SequenceMethodCodeVisitor -> SingleMethodVisitor

	ClassFieldVisitor -> UMLField

	ClassMethodVisitor -> UMLMethod

	ClassMethodVisitor -> IMethod

	CompositeLeafDecorator -> IClass

	MethodDeclarationVisitor -> MethodCodeVisitor

	SingletonFieldVisitor -> UMLParser

	SingletonFieldVisitor -> SingletonMethodVisitor

	DecoratorDecorator -> IClass

	SingletonDecorator -> IClass

	CompositeDetector -> Classes

	CompositeDetector -> IField

	CompositeDetector -> CompositeDecorator

	CompositeDetector -> IClassDecorator

	CompositeDetector -> CompositeLeafDecorator

	CompositeDetector -> CompositeComponentDecorator

}CompositeDetector -> CompositeComponentDecorator

}an gotFocus(java.awt.Event, java.lang.Object)\l+ boolean lostFocus(java.awt.Event, java.lang.Object)\l+ boolean isFocusTraversable()\l+ boolean isFocusable()\l+ void setFocusable(boolean)\l  boolean isFocusTraversableOverridden()\l+ void setFocusTraversalKeys(int, java.util.Set)\l+ Set getFocusTraversalKeys(int)\l  void setFocusTraversalKeys_NoIDCheck(int, java.util.Set)\l  Set getFocusTraversalKeys_NoIDCheck(int)\l+ boolean areFocusTraversalKeysSet(int)\l+ void setFocusTraversalKeysEnabled(boolean)\l+ boolean getFocusTraversalKeysEnabled()\l+ void requestFocus()\l  boolean requestFocus(sun.awt.CausedFocusEvent$Cause)\l# boolean requestFocus(boolean)\l  boolean requestFocus(boolean, sun.awt.CausedFocusEvent$Cause)\l+ boolean requestFocusInWindow()\l  boolean requestFocusInWindow(sun.awt.CausedFocusEvent$Cause)\l# boolean requestFocusInWindow(boolean)\l  boolean requestFocusInWindow(boolean, sun.awt.CausedFocusEvent$Cause)\l  boolean requestFocusHelper(boolean, boolean)\l  boolean requestFocusHelper(boolean, boolean, sun.awt.CausedFocusEvent$Cause)\l- boolean isRequestFocusAccepted(boolean, boolean, sun.awt.CausedFocusEvent$Cause)\l  void setRequestFocusController(sun.awt.RequestFocusController)\l+ Container getFocusCycleRootAncestor()\l+ boolean isFocusCycleRoot(java.awt.Container)\l  Container getTraversalRoot()\l+ void transferFocus()\l+ void nextFocus()\l  boolean transferFocus(boolean)\l  Component getNextFocusCandidate()\l+ void transferFocusBackward()\l  boolean transferFocusBackward(boolean)\l+ void transferFocusUpCycle()\l+ boolean hasFocus()\l+ boolean isFocusOwner()\l  void setAutoFocusTransferOnDisposal(boolean)\l  boolean isAutoFocusTransferOnDisposal()\l+ void add(java.awt.PopupMenu)\l+ void remove(java.awt.MenuComponent)\l# String paramString()\l+ String toString()\l+ void list()\l+ void list(java.io.PrintStream)\l+ void list(java.io.PrintStream, int)\l+ void list(java.io.PrintWriter)\l+ void list(java.io.PrintWriter, int)\l  Container getNativeContainer()\l+ void addPropertyChangeListener(java.beans.PropertyChangeListener)\l+ void removePropertyChangeListener(java.beans.PropertyChangeListener)\l+ PropertyChangeListener[] getPropertyChangeListeners()\l+ void addPropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener)\l+ void removePropertyChangeListener(java.lang.String, java.beans.PropertyChangeListener)\l+ PropertyChangeListener[] getPropertyChangeListeners(java.lang.String)\l# void firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object)\l# void firePropertyChange(java.lang.String, boolean, boolean)\l# void firePropertyChange(java.lang.String, int, int)\l+ void firePropertyChange(java.lang.String, byte, byte)\l+ void firePropertyChange(java.lang.String, char, char)\l+ void firePropertyChange(java.lang.String, short, short)\l+ void firePropertyChange(java.lang.String, long, long)\l+ void firePropertyChange(java.lang.String, float, float)\l+ void firePropertyChange(java.lang.String, double, double)\l- void doSwingSerialization()\l- void writeObject(java.io.ObjectOutputStream)\l- void readObject(java.io.ObjectInputStream)\l+ void setComponentOrientation(java.awt.ComponentOrientation)\l+ ComponentOrientation getComponentOrientation()\l+ void applyComponentOrientation(java.awt.ComponentOrientation)\l  boolean canBeFocusOwner()\l  boolean canBeFocusOwnerRecursively()\l  void relocateComponent()\l  Window getContainingWindow()\l- void initIDs()\l+ AccessibleContext getAccessibleContext()\l  int getAccessibleIndexInParent()\l  AccessibleStateSet getAccessibleStateSet()\l  boolean isInstanceOf(java.lang.Object, java.lang.String)\l  boolean areBoundsValid()\l  void applyCompoundShape(sun.java2d.pipe.Region)\l- Region getAppliedShape()\l  Point getLocationOnWindow()\l  Region getNormalShape()\l  Region getOpaqueShape()\l  int getSiblingIndexAbove()\l  ComponentPeer getHWPeerAboveMe()\l  int getSiblingIndexBelow()\l  boolean isNonOpaqueForMixing()\l- Region calculateCurrentShape()\l  void applyCurrentShape()\l  void subtractAndApplyShape(sun.java2d.pipe.Region)\l- void applyCurrentShapeBelowMe()\l  void subtractAndApplyShapeBelowMe()\l  void mixOnShowing()\l  void mixOnHiding(boolean)\l  void mixOnReshaping()\l  void mixOnZOrderChanging(int, int)\l  void mixOnValidating()\l  boolean isMixingNeeded()\l  void updateZOrder()\l  Region access$002(java.awt.Component, sun.java2d.pipe.Region)\l  Point access$100(java.awt.Component)\l  Insets access$400(java.awt.Component)\l  boolean access$500(java.lang.Class)\l|}"
		style=filled
		fillcolor=yellow

	]

	Button [
		label = "{\<\<Composite\>\>\njava/awt/Button|  label: java.lang.String\l  actionCommand: java.lang.String\l  actionListener: java.awt.event.ActionListener\l- base: java.lang.String\l- nameCounter: int\l- serialVersionUID: long\l- buttonSerializedDataVersion: int\l|- void initIDs()\l  String constructComponentName()\l+ void addNotify()\l+ String getLabel()\l+ void setLabel(java.lang.String)\l+ void setActionCommand(java.lang.String)\l+ String getActionCommand()\l+ void addActionListener(java.awt.event.ActionListener)\l+ void removeActionListener(java.awt.event.ActionListener)\l+ ActionListener[] getActionListeners()\l+ EventListener[] getListeners(java.lang.Class)\l  boolean eventEnabled(java.awt.AWTEvent)\l# void processEvent(java.awt.AWTEvent)\l# void processActionEvent(java.awt.event.ActionEvent)\l# String paramString()\l- void writeObject(java.io.ObjectOutputStream)\l- void readObject(java.io.ObjectInputStream)\l+ AccessibleContext getAccessibleContext()\l|}"
		style=filled
		fillcolor=yellow

	]

	edge [
		arrowhead = "empty"
	]

	Container -> Component

	Button -> Component

	edge [
		style = "dashed"
	]

	edge [
		arrowhead = "normal" style = "solid"
	]

	Container -> Component

	Component -> Container

	edge [
		arrowhead = "normal" style = "dashed"
	]

}